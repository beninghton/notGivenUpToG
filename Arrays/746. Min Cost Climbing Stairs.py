class Solution:
    def minCostClimbingStairs(self, cost):
        """
        :type cost: List[int]
        :rtype: int
        """

        if cost == []:
            return 0

        def helper(n, min_cost):
            if n > len(cost) - 1:
                return min_cost

            min_cost += cost[n]

            return min(helper(n + 1, min_cost), helper(n + 2, min_cost))

        # Start from 0 or 1
        return min(helper(0, 0), helper(1, 0))


# T - O(N^2) - only 2 options, binary tree
# S - O(N) - lenght of the longest stack in recursion



    # memoization
    def minCostClimbingStairs2(self, cost):
        """
        :type cost: List[int]
        :rtype: int
        """

        if cost == []:
            return 0

        def helper(n, memo):
            # Если осталось 2 последних, просто возвращаем их значения.
            if n + 2 > len(cost) - 1:
                return cost[n]

            if n in memo:
                return memo[n]

            # Дальше запоминаем их, выбираем минимальное
            memo[n] = cost[n] + min(helper(n + 1, memo), helper(n + 2, memo))

            return memo[n]


        memo = dict()

        return min(helper(0, memo), helper(1, memo))

# T - O(N)
# S - O(N)


    #https://leetcode.com/problems/min-cost-climbing-stairs/solution/
    def minCostClimbingStairsDP(self, cost):

        f1, f2 = 0, 0

        for x in cost:
            f1, f2 = x + min(f1, f2), f1

        return min(f1, f2)

    # Модифицирует входной массив
    def minCostClimbingStairsDP2(self, cost):

        for i in range(2, len(cost)):
            cost[i] += min(cost[i-1], cost[i-2])

        return min(cost[-1], cost[-2])



sol = Solution()

cost = [742,362,196,75,193,162,645,859,758,433,903,199,289,175,303,475,818,213,576,181,668,243,297,572,549,840,161,292,719,226,338,981,345,203,655,210,65,111,746,76,935,406,646,976,567,32,726,638,674,727,861,426,297,349,464,973,341,452,826,223,805,940,458,468,967,107,345,987,553,407,916,103,324,367,864,74,946,712,596,105,194,79,634,855,703,70,170,543,208,739,632,663,880,857,824,258,743,488,659,647,470,958,492,211,927,356,488,744,570,143,674,502,589,270,80,6,463,506,556,495,713,407,229,689,280,162,454,757,565,267,575,417,948,607,269,852,938,560,24,222,580,604,800,628,487,485,615,796,384,555,226,412,445,503,810,949,966,28,768,83,213,883,963,831,390,951,378,497,440,780,209,734,290,96,398,146,56,445,880,910,858,671,164,552,686,748,738,837,556,710,787,343,137,298,685,909,828,499,816,538,604,652,7,272,729,529,343,443,593,992,434,588,936,261,873,64,177,827,172,712,628,609,328,672,376,628,441,9,92,525,222,654,699,134,506,934,178,270,770,994,158,653,199,833,802,553,399,366,818,523,447,420,957,669,267,118,535,971,180,469,768,184,321,712,167,867,12,660,283,813,498,192,740,696,421,504,795,894,724,562,234,110,88,100,408,104,864,473,59,474,922,759,720,69,490,540,962,461,324,453,91,173,870,470,292,394,771,161,777,287,560,532,339,301,90,411,387,59,67,828,775,882,677,9,393,128,910,630,396,77,321,642,568,817,222,902,680,596,359,639,189,436,648,825,46,699,967,202,954,680,251,455,420,599,20,894,224,47,266,644,943,808,653,563,351,709,116,849,38,870,852,333,829,306,881,203,660,266,540,510,748,840,821,199,250,253,279,672,472,707,921,582,713,900,137,70,912,51,250,188,967,14,608,30,541,424,813,343,297,346,27,774,549,931,141,81,120,342,288,332,967,768,178,230,378,800,408,272,596,560,942,612,910,743,461,425,878,254,929,780,641,657,279,160,184,585,651,204,353,454,536,185,550,428,125,889,436,906,99,942,355,666,746,964,936,661,515,978,492,836,468,867,422,879,92,438,802,276,805,832,649,572,638,43,971,974,804,66,100,792,878,469,585,254,630,309,172,361,906,628,219,534,617,95,190,541,93,477,933,328,984,117,678,746,296,232,240,532,643,901,982,342,918,884,62,68,835,173,493,252,382,862,672,803,803,873,24,431,580,257,457,519,388,218,970,691,287,486,274,942,184,817,405,575,369,591,713,158,264,826,870,561,450,419,606,925,710,758,151,533,405,946,285,86,346,685,153,834,625,745,925,281,805,99,891,122,102,874,491,64,277,277,840,657,443,492,880,925,65,880,393,504,736,340,64,330,318,703,949,950,887,956,39,595,764,176,371,215,601,435,249,86,761,793,201,54,189,451,179,849,760,689,539,453,450,404,852,709,313,529,666,545,399,808,290,848,129,352,846,2,266,777,286,22,898,81,299,786,949,435,434,695,298,402,532,177,399,458,528,672,882,90,547,690,935,424,516,390,346,702,781,644,794,420,116,24,919,467,543,58,938,217,502,169,457,723,122,158,188,109,868,311,708,8,893,853,376,359,223,654,895,877,709,940,195,323,64,51,807,510,170,508,155,724,784,603,67,316,217,148,972,19,658,5,762,618,744,534,956,703,434,302,541,997,214,429,961,648,774,244,684,218,49,729,990,521,948,317,847,76,566,415,874,399,613,816,613,467,191]
#cost = [742,362,196,75,193,162,645,859,758,433,903,199,289,175,303,475,818,213,576,181,668,243,297,572,549,840,161,292,719]
#cost = [1,100,102,10]
#cost = [0,1,1,0]

import datetime
t = datetime.datetime.now().microsecond
print(sol.minCostClimbingStairsDP(cost))
print(datetime.datetime.now().microsecond - t)

t = datetime.datetime.now().microsecond
print(sol.minCostClimbingStairsDP2(cost))
print(datetime.datetime.now().microsecond - t)